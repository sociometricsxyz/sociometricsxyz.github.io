{"ast":null,"code":"import { useEffect, useState } from \"react\";\n\nconst getScroll = () => ({\n  scrollX: false ? window.scrollX : 0,\n  scrollY: false ? window.scrollY : 0\n});\n\nconst useWindowScroll = (onlyOnScrollEnd = true) => {\n  const {\n    0: windowScroll,\n    1: setWindowScroll\n  } = useState(getScroll());\n  useEffect(() => {\n    let scrollId;\n\n    const handleScroll = () => {\n      if (onlyOnScrollEnd) {\n        clearTimeout(scrollId);\n        scrollId = setTimeout(() => setWindowScroll(getScroll()), 50);\n      } else {\n        setWindowScroll(getScroll());\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [onlyOnScrollEnd]);\n  useEffect(() => {\n    const handleLoaded = () => {\n      setWindowScroll(getScroll());\n    };\n\n    window.addEventListener(\"DOMContentLoaded\", handleLoaded);\n    return () => window.removeEventListener(\"DOMContentLoaded\", handleLoaded);\n  }, []);\n  return windowScroll;\n};\n\nexport default useWindowScroll;","map":{"version":3,"sources":["/Users/adrianorlow/Programowanie/commercial/sociometrics-landing/src/utils/hooks/useWindowScroll.ts"],"names":["useEffect","useState","getScroll","scrollX","window","scrollY","useWindowScroll","onlyOnScrollEnd","windowScroll","setWindowScroll","scrollId","handleScroll","clearTimeout","setTimeout","addEventListener","removeEventListener","handleLoaded"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,SAAS,GAAG,OAAO;AACvBC,EAAAA,OAAO,EAAE,QAAgCC,MAAM,CAACD,OAAvC,GAAiD,CADnC;AAEvBE,EAAAA,OAAO,EAAE,QAAgCD,MAAM,CAACC,OAAvC,GAAiD;AAFnC,CAAP,CAAlB;;AAKA,MAAMC,eAAe,GAAG,CAACC,eAAe,GAAG,IAAnB,KAA4B;AAClD,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCR,QAAQ,CAACC,SAAS,EAAV,CAAhD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,QAAJ;;AAEA,UAAMC,YAAY,GAAG,MAAM;AACzB,UAAIJ,eAAJ,EAAqB;AACnBK,QAAAA,YAAY,CAACF,QAAD,CAAZ;AACAA,QAAAA,QAAQ,GAAGG,UAAU,CAAC,MAAMJ,eAAe,CAACP,SAAS,EAAV,CAAtB,EAAqC,EAArC,CAArB;AACD,OAHD,MAGO;AACLO,QAAAA,eAAe,CAACP,SAAS,EAAV,CAAf;AACD;AACF,KAPD;;AASAE,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCH,YAAlC;AACA,WAAO,MAAMP,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCJ,YAArC,CAAb;AACD,GAdQ,EAcN,CAACJ,eAAD,CAdM,CAAT;AAgBAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,YAAY,GAAG,MAAM;AACzBP,MAAAA,eAAe,CAACP,SAAS,EAAV,CAAf;AACD,KAFD;;AAIAE,IAAAA,MAAM,CAACU,gBAAP,CAAwB,kBAAxB,EAA4CE,YAA5C;AACA,WAAO,MAAMZ,MAAM,CAACW,mBAAP,CAA2B,kBAA3B,EAA+CC,YAA/C,CAAb;AACD,GAPQ,EAON,EAPM,CAAT;AASA,SAAOR,YAAP;AACD,CA7BD;;AA+BA,eAAeF,eAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst getScroll = () => ({\n  scrollX: typeof window !== \"undefined\" ? window.scrollX : 0,\n  scrollY: typeof window !== \"undefined\" ? window.scrollY : 0,\n});\n\nconst useWindowScroll = (onlyOnScrollEnd = true) => {\n  const [windowScroll, setWindowScroll] = useState(getScroll());\n\n  useEffect(() => {\n    let scrollId;\n\n    const handleScroll = () => {\n      if (onlyOnScrollEnd) {\n        clearTimeout(scrollId);\n        scrollId = setTimeout(() => setWindowScroll(getScroll()), 50);\n      } else {\n        setWindowScroll(getScroll());\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [onlyOnScrollEnd]);\n\n  useEffect(() => {\n    const handleLoaded = () => {\n      setWindowScroll(getScroll());\n    };\n\n    window.addEventListener(\"DOMContentLoaded\", handleLoaded);\n    return () => window.removeEventListener(\"DOMContentLoaded\", handleLoaded);\n  }, []);\n\n  return windowScroll;\n};\n\nexport default useWindowScroll;\n"]},"metadata":{},"sourceType":"module"}